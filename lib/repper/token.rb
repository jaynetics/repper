module Repper
  # A part of a Regexp. Generated by Repper::Tokenizer.
  # `expression:` must be a Regexp::Expression::Base from regexp_parser.
  Token = Struct.new(:expression, :text) do
    def indented_text
      "#{'  ' * expression.nesting_level}#{inlined_text}"
    end

    def inlined_text
      if comment?
        text.strip
      else
        text
          .gsub(/(?<!\\) /, '\\ ')
          .gsub(/[\n\r\t\v]/) { |ws| ws.inspect.delete(?") }
      end
    end

    def comment?
      subtype == :comment
    end

    def root?
      subtype == :root
    end

    def whitespace?
      subtype == :whitespace
    end

    def type
      expression.type
    end

    def subtype
      expression.token
    end

    def annotation
      expression.human_name unless root?
    end
  end
end
